# Kubernetes Network Topology Diagram
# K8S-NetInspect Test Environment

```
┌─────────────────────────────────────────────────────────────────────────┐
│                     KUBERNETES CLUSTER TOPOLOGY                        │
│                        (k8s-enterprise)                                │
└─────────────────────────────────────────────────────────────────────────┘

                              ┌─────────────────┐
                              │   Control Plane │
                              │   172.18.0.2    │
                              │  (API Server,   │
                              │  etcd, scheduler)│
                              └─────────┬───────┘
                                        │
                    ┌───────────────────┼───────────────────┐
                    │                   │                   │
              ┌─────▼─────┐       ┌─────▼─────┐       ┌─────▼─────┐
              │  Worker-1 │       │  Worker-2 │       │  Worker-3 │
              │172.18.0.4 │       │172.18.0.3 │       │172.18.0.5 │
              └───────────┘       └───────────┘       └───────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│                        NETWORK SEGMENTATION                            │
└─────────────────────────────────────────────────────────────────────────┘

    ┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
    │ ecommerce-      │    │ ecommerce-      │    │ ecommerce-      │
    │ frontend        │    │ backend         │    │ database        │
    │ ┌─────────────┐ │    │ ┌─────────────┐ │    │ ┌─────────────┐ │
    │ │Load Balancer│ │    │ │  Backend    │ │    │ │ PostgreSQL  │ │
    │ │ (2 replicas)│ │    │ │  API        │ │    │ │ Primary     │ │
    │ └─────────────┘ │    │ │(2 replicas) │ │    │ │ (1 replica) │ │
    │ ┌─────────────┐ │    │ └─────────────┘ │    │ └─────────────┘ │
    │ │ Frontend    │ │    │                 │    │ ┌─────────────┐ │
    │ │ Web         │ │    │                 │    │ │ PostgreSQL  │ │
    │ │(3 replicas) │ │    │                 │    │ │ Replicas    │ │
    │ └─────────────┘ │    │                 │    │ │(2 replicas) │ │
    └─────────────────┘    └─────────────────┘    │ └─────────────┘ │
                                                  │ ┌─────────────┐ │
                                                  │ │   Redis     │ │
                                                  │ │   Cache     │ │
                                                  │ │(3 replicas) │ │
                                                  │ └─────────────┘ │
                                                  └─────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│                       SERVICE MESH DEMO                                │
└─────────────────────────────────────────────────────────────────────────┘

    ┌─────────────────────────────────────────────────────────────────┐
    │                  service-mesh-demo                              │
    │                                                                 │
    │  ┌─────────────┐    ┌─────────────┐    ┌─────────────┐        │
    │  │ Frontend    │    │ Backend v1  │    │ Database    │        │
    │  │(2 replicas) │    │(2 replicas) │    │(1 replica)  │        │
    │  └─────────────┘    └─────────────┘    └─────────────┘        │
    │                     ┌─────────────┐                           │
    │                     │ Backend v2  │    Canary Deployment:     │
    │                     │(1 replica)  │    66% v1, 33% v2         │
    │                     └─────────────┘                           │
    └─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│                     MONITORING STACK                                   │
└─────────────────────────────────────────────────────────────────────────┘

    ┌─────────────────────────────────────────────────────────────────┐
    │                      monitoring                                 │
    │                                                                 │
    │  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐            │
    │  │ Prometheus  │  │   Grafana   │  │AlertManager │            │
    │  │(NodePort    │  │(NodePort    │  │(ClusterIP)  │            │
    │  │  30000)     │  │  30001)     │  │             │            │
    │  └─────────────┘  └─────────────┘  └─────────────┘            │
    │                                                                 │
    │  ┌─────────────┐  ┌─────────────────────────────────────────┐  │
    │  │   Node      │  │          Kube State Metrics           │  │
    │  │ Exporter    │  │         (All Node Monitoring)         │  │
    │  │(DaemonSet)  │  └─────────────────────────────────────────┘  │
    │  └─────────────┘                                               │
    └─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│                      NETWORK POLICIES                                  │
└─────────────────────────────────────────────────────────────────────────┘

    Frontend ──────────────► Backend
    (Allow on port 8080)     │
                             ▼
                        Database
                    (Allow 5432/3306)

    ┌─────────────────┐
    │ Network Policies│
    ├─────────────────┤
    │ deny-all-backend│ ◄─── Default deny all traffic
    │ allow-frontend- │
    │   to-backend    │ ◄─── Allow cross-namespace
    │ allow-backend-  │
    │   to-db         │ ◄─── Database access control
    │ backend-egress- │
    │   policy        │ ◄─── Egress restrictions
    │ tenant-         │
    │   isolation     │ ◄─── Multi-tenant security
    │ mesh-network-   │
    │   policy        │ ◄─── Service mesh ready
    └─────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│                        CNI INFORMATION                                 │
└─────────────────────────────────────────────────────────────────────────┘

    CNI Provider: Kindnet (Flannel-based)
    Network Plugin: VXLAN Overlay
    Pod CIDR: 10.244.0.0/16
    Service CIDR: 10.96.0.0/12

    ┌─────────────────────────────────────────────────────────┐
    │               Pod Network Layout                        │
    ├─────────────────────────────────────────────────────────┤
    │ Control Plane: 10.244.0.0/24                          │
    │ Worker-1:      10.244.1.0/24                          │
    │ Worker-2:      10.244.2.0/24                          │
    │ Worker-3:      10.244.3.0/24                          │
    └─────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│                     TRAFFIC FLOW ANALYSIS                              │
└─────────────────────────────────────────────────────────────────────────┘

    External Request (via LoadBalancer)
           │
           ▼
    ┌─────────────┐    HTTP/443    ┌─────────────┐
    │   Ingress   │───────────────►│  Frontend   │
    │ Controller  │                │  Service    │
    │(nginx)      │                │(ClusterIP)  │
    └─────────────┘                └─────────────┘
                                          │
                                          ▼ Network Policy: Allow
                                   ┌─────────────┐
                                   │  Backend    │
                                   │  Service    │
                                   │(ClusterIP)  │
                                   └─────────────┘
                                          │
                                          ▼ Network Policy: Allow
                                   ┌─────────────┐
                                   │ Database    │
                                   │ Services    │
                                   │(ClusterIP)  │
                                   └─────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│                     TESTING SCENARIOS                                  │
└─────────────────────────────────────────────────────────────────────────┘

    ✓ Multi-namespace network isolation testing
    ✓ Cross-namespace communication validation
    ✓ Network policy enforcement verification
    ✓ Service discovery and DNS resolution
    ✓ CNI detection and analysis
    ✓ Pod connectivity troubleshooting
    ✓ Service mesh traffic splitting
    ✓ Monitoring stack integration
    ✓ Load balancing and ingress testing
    ✓ Database clustering validation

    Metrics:
    - 42 Pods across 15 Namespaces
    - 7 Network Policies enforcing segmentation
    - 27 Services with diverse types
    - 4 Nodes with full CNI coverage
    - <200ms average API response times
```

# Network Performance Characteristics

## DNS Resolution
- Primary DNS: 10.96.0.10:53 (CoreDNS)
- Cross-namespace resolution tested
- Service discovery functional

## Load Balancing
- Multiple LoadBalancer services
- ClusterIP for internal communication
- NodePort for external access (Prometheus: 30000, Grafana: 30001)

## Security Segmentation
- Default deny-all policies implemented
- Granular cross-namespace permissions
- Egress controls for external traffic
- DNS limited to kube-system

## Performance Metrics
- kubectl get nodes: 347ms
- kubectl get pods -A: 175ms
- kubectl get services: 179ms
- Network policy queries: <200ms

This topology demonstrates a production-ready Kubernetes environment
suitable for comprehensive testing of k8s-netinspect network inspection
and troubleshooting capabilities.
