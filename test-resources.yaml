---
# Create multiple namespaces
apiVersion: v1
kind: Namespace
metadata:
  name: production
  labels:
    environment: production
---
apiVersion: v1
kind: Namespace
metadata:
  name: staging
  labels:
    environment: staging
---
apiVersion: v1
kind: Namespace
metadata:
  name: testing
  labels:
    environment: testing
---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    environment: monitoring
---
# NGINX Deployment in production
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-web
  namespace: production
  labels:
    app: nginx-web
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-web
  template:
    metadata:
      labels:
        app: nginx-web
    spec:
      containers:
      - name: nginx
        image: nginx:1.21
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
---
# Service for NGINX
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: production
spec:
  selector:
    app: nginx-web
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---
# Apache Deployment in staging
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apache-web
  namespace: staging
  labels:
    app: apache-web
spec:
  replicas: 2
  selector:
    matchLabels:
      app: apache-web
  template:
    metadata:
      labels:
        app: apache-web
    spec:
      containers:
      - name: apache
        image: httpd:2.4
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
---
# Service for Apache
apiVersion: v1
kind: Service
metadata:
  name: apache-service
  namespace: staging
spec:
  selector:
    app: apache-web
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-cache
  namespace: production
  labels:
    app: redis-cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-cache
  template:
    metadata:
      labels:
        app: redis-cache
    spec:
      containers:
      - name: redis
        image: redis:6-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "32Mi"
            cpu: "100m"
          limits:
            memory: "64Mi"
            cpu: "200m"
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: production
spec:
  selector:
    app: redis-cache
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP
---
# BusyBox pod for testing
apiVersion: v1
kind: Pod
metadata:
  name: busybox-debug
  namespace: testing
  labels:
    app: busybox-debug
spec:
  containers:
  - name: busybox
    image: busybox:1.35
    command: ['sleep', '3600']
    resources:
      requests:
        memory: "16Mi"
        cpu: "50m"
      limits:
        memory: "32Mi"
        cpu: "100m"
---
# MySQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-db
  namespace: production
  labels:
    app: mysql-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql-db
  template:
    metadata:
      labels:
        app: mysql-db
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "rootpassword"
        - name: MYSQL_DATABASE
          value: "testdb"
        ports:
        - containerPort: 3306
        resources:
          requests:
            memory: "128Mi"
            cpu: "250m"
          limits:
            memory: "256Mi"
            cpu: "500m"
---
# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: production
spec:
  selector:
    app: mysql-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  type: ClusterIP
---
# Node.js API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs-api
  namespace: staging
  labels:
    app: nodejs-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nodejs-api
  template:
    metadata:
      labels:
        app: nodejs-api
    spec:
      containers:
      - name: nodejs
        image: node:16-alpine
        command: ['sh', '-c', 'echo "const http = require(\"http\"); const server = http.createServer((req, res) => { res.writeHead(200, {\"Content-Type\": \"application/json\"}); res.end(JSON.stringify({message: \"API is running\", timestamp: new Date().toISOString()})); }); server.listen(3000, () => console.log(\"API server running on port 3000\"));" > app.js && node app.js']
        ports:
        - containerPort: 3000
        resources:
          requests:
            memory: "32Mi"
            cpu: "100m"
          limits:
            memory: "64Mi"
            cpu: "200m"
---
# Node.js API Service
apiVersion: v1
kind: Service
metadata:
  name: nodejs-api-service
  namespace: staging
spec:
  selector:
    app: nodejs-api
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: ClusterIP
---
# Prometheus Pod for monitoring
apiVersion: v1
kind: Pod
metadata:
  name: prometheus-server
  namespace: monitoring
  labels:
    app: prometheus
spec:
  containers:
  - name: prometheus
    image: prom/prometheus:v2.40.0
    ports:
    - containerPort: 9090
    resources:
      requests:
        memory: "64Mi"
        cpu: "100m"
      limits:
        memory: "128Mi"
        cpu: "200m"
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: monitoring
spec:
  selector:
    app: prometheus
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
  type: ClusterIP
---
# Grafana Pod
apiVersion: v1
kind: Pod
metadata:
  name: grafana-dashboard
  namespace: monitoring
  labels:
    app: grafana
spec:
  containers:
  - name: grafana
    image: grafana/grafana:9.0.0
    ports:
    - containerPort: 3000
    env:
    - name: GF_SECURITY_ADMIN_PASSWORD
      value: "admin123"
    resources:
      requests:
        memory: "64Mi"
        cpu: "100m"
      limits:
        memory: "128Mi"
        cpu: "200m"
---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: monitoring
spec:
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: ClusterIP
---
# Python Flask App
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
  namespace: testing
  labels:
    app: flask-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask
        image: python:3.9-slim
        command: ['sh', '-c', 'pip install flask && echo "from flask import Flask, jsonify\napp = Flask(__name__)\n@app.route(\"/\")\ndef hello():\n    return jsonify({\"message\": \"Flask app is running\", \"status\": \"healthy\"})\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)" > app.py && python app.py']
        ports:
        - containerPort: 5000
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
---
# Flask Service
apiVersion: v1
kind: Service
metadata:
  name: flask-service
  namespace: testing
spec:
  selector:
    app: flask-app
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
  type: ClusterIP